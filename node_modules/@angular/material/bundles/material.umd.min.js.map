{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.3.6');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes.disableRipple;\n\n    if (disableRippleChanges && !disableRippleChanges.firstChange) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsDisabledState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsDisabledState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's disabled state with the individual chips. */\n  private _syncChipsDisabledState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': '_hasAriaLabel ? ariaLabel : null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  /**\n   * Whether the button should have an `aria-label`. Used for clearing the\n   * attribute to prevent it from being read instead of the button's text.\n   */\n  _hasAriaLabel?: boolean;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (typeof this._hasAriaLabel === 'undefined') {\n      const element = this._elementRef.nativeElement;\n\n      if (element.hasAttribute('mat-icon-button')) {\n        this._hasAriaLabel = true;\n      } else {\n        const buttonTextContent = element.textContent;\n        this._hasAriaLabel = !buttonTextContent || buttonTextContent.trim().length === 0;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange =\n        changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n\n    if (changes.ariaLabel) {\n      this._hasAriaLabel = !!changes.ariaLabel.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    const zone = this._ngZone;\n\n    if (zone) {\n      // Note that we have to run outside of the `NgZone` explicitly,\n      // in order to avoid throwing users into an infinite loop\n      // if `zone-patch-rxjs` is included.\n      zone.runOutsideAngular(() => {\n        zone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n          if (this._outlineGapCalculationNeededOnStable) {\n            this.updateOutlineGap();\n          }\n        });\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_this","_elementRef","_tree","_differs","tabIndex","Number","tslib_1.__extends","MatNestedTreeNode","_super","prototype","ngAfterContentInit","call","this","ngOnDestroy","type","Directive","args","selector","exportAs","host","[attr.aria-expanded]","[attr.role]","class","inputs","providers","provide","CdkNestedTreeNode","useExisting","CdkTreeNode","CDK_TREE_NODE_OUTLET_NODE","ElementRef","CdkTree","IterableDiffers","String","decorators","Attribute","node","Input","nodeOutlet","ContentChildren","MatTreeNodeOutlet","descendants","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","role","styles","encapsulation","ViewEncapsulation","None","propDecorators","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeNodeDef","MatTreeNode","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabBody","position","_positionIndex","_computePositionAnimationState","ngOnInit","_position","origin","_computePositionFromOrigin","_dirChangeSubscription","unsubscribe","_translateTabComplete","complete","_onTranslateTabStarted","event","isCentering","_isCenterPosition","toState","_beforeCentering","emit","_onCentering","nativeElement","clientHeight","_getLayoutDirection","_dir","dir","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","ChangeDetectorRef","_afterLeavingCenter","Output","_onCentered","_portalHost","ViewChild","PortalHostDirective","_content","animationDuration","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","Subject","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_node","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","[attr.aria-level]","CdkTreeNodeDef","MatStepHeader","_getDefaultTextForState","state","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","distinctUntilChanged","x","y","fromState","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","changeDetectorRef","_orientation","ctorParameters","MatStepperNext","(click)","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_right","_left","_end","_start","MatDrawerContainer","_onBackdropClicked","backdropClick","_closeModalDrawer","drawer","disableClose","_canHaveBackdrop","close","_isShowingBackdrop","_isDrawerOpen","mode","_width","opened","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_message","_manualListeners","_scrollStrategy","scrollStrategy","elementStyle","hasGestures","window","Hammer","hammerLoader","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_defaultOptions","MatTooltip","_updatePosition","_tooltipInstance","updatePosition","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","hideDelay","isVisible","e","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_handleTouchStart","_menuItemInstance","_triggersSubmenu","triggersSubmenu","MatMenuTrigger","menu","_menu","_menuCloseSubscription","reason","_destroyMenu","_parentMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatListOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","displayMode","MatAccordion","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","_hasAriaLabel","buttonTextContent","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_syncChipsDisabledState","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_placeholderChild","MatPlaceholder","_labelChild","MatLabel","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","zone","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}