import { ElementRef, Component, Renderer2, Input, Output, EventEmitter, ViewChild, ContentChildren, QueryList, Inject, HostListener } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { DragScrollItemDirective } from './ngx-drag-scroll-item';
var DragScrollComponent = (function () {
    function DragScrollComponent(_elementRef, _renderer, _document) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._document = _document;
        this._index = 0;
        this._scrollbarHidden = false;
        this._disabled = false;
        this._xDisabled = false;
        this._xWheelEnabled = false;
        this._yDisabled = false;
        this._dragDisabled = false;
        this._snapDisabled = false;
        this._snapOffset = 0;
        this._snapDuration = 500;
        this.isPressed = false;
        this.isScrolling = false;
        this.scrollTimer = -1;
        this.scrollToTimer = -1;
        this.downX = 0;
        this.downY = 0;
        this.displayType = 'block';
        this.elWidth = null;
        this.elHeight = null;
        this.scrollbarWidth = null;
        this.isAnimating = false;
        this.prevChildrenLength = 0;
        this.indexBound = 0;
        this.dsInitialized = new EventEmitter();
        this.indexChanged = new EventEmitter();
        this.reachesLeftBound = new EventEmitter();
        this.reachesRightBound = new EventEmitter();
        this.snapAnimationFinished = new EventEmitter();
        this.scrollbarWidth = this.getScrollbarWidth() + "px";
    }
    Object.defineProperty(DragScrollComponent.prototype, "currIndex", {
        get: function () { return this._index; },
        set: function (value) {
            if (value !== this._index) {
                this._index = value;
                this.indexChanged.emit(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragScrollComponent.prototype, "scrollbarHidden", {
        get: function () { return this._scrollbarHidden; },
        set: function (value) { this._scrollbarHidden = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragScrollComponent.prototype, "disabled", {
        get: function () { return this._disabled; },
        set: function (value) { this._disabled = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragScrollComponent.prototype, "xDisabled", {
        get: function () { return this._xDisabled; },
        set: function (value) { this._xDisabled = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragScrollComponent.prototype, "yDisabled", {
        get: function () { return this._yDisabled; },
        set: function (value) { this._yDisabled = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragScrollComponent.prototype, "xWheelEnabled", {
        get: function () { return this._xWheelEnabled; },
        set: function (value) { this._xWheelEnabled = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragScrollComponent.prototype, "dragDisabled", {
        get: function () { return this._dragDisabled; },
        set: function (value) { this._dragDisabled = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragScrollComponent.prototype, "snapDisabled", {
        get: function () { return this._snapDisabled; },
        set: function (value) { this._snapDisabled = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragScrollComponent.prototype, "snapOffset", {
        get: function () { return this._snapOffset; },
        set: function (value) { this._snapOffset = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DragScrollComponent.prototype, "snapDuration", {
        get: function () { return this._snapDuration; },
        set: function (value) { this._snapDuration = value; },
        enumerable: true,
        configurable: true
    });
    DragScrollComponent.prototype.ngOnChanges = function () {
        this.setScrollBar();
        if (this.xDisabled || this.disabled) {
            this.disableScroll('x');
        }
        else {
            this.enableScroll('x');
        }
        if (this.yDisabled || this.disabled) {
            this.disableScroll('y');
        }
        else {
            this.enableScroll('y');
        }
    };
    DragScrollComponent.prototype.ngAfterViewInit = function () {
        this._renderer.setAttribute(this._contentRef.nativeElement, 'drag-scroll', 'true');
        this.displayType = typeof window !== 'undefined' ? window.getComputedStyle(this._elementRef.nativeElement).display : 'block';
        this._renderer.setStyle(this._contentRef.nativeElement, 'display', this.displayType);
        this._renderer.setStyle(this._contentRef.nativeElement, 'whiteSpace', 'noWrap');
        this.markElDimension();
        this._renderer.setStyle(this._contentRef.nativeElement, 'width', this.elWidth);
        this._renderer.setStyle(this._contentRef.nativeElement, 'height', this.elHeight);
        if (this.wrapper) {
            this.checkScrollbar();
        }
        this._onMouseDownListener = this._renderer.listen(this._contentRef.nativeElement, 'mousedown', this.onMouseDownHandler.bind(this));
        this._onTouchStartListener = this._renderer.listen(this._contentRef.nativeElement, 'touchstart', this.onMouseDownHandler.bind(this));
        this._onScrollListener = this._renderer.listen(this._contentRef.nativeElement, 'scroll', this.onScrollHandler.bind(this));
        this._onTouchEndListener = this._renderer.listen(this._contentRef.nativeElement, 'touchend', this.onMouseUpHandler.bind(this));
        this._onDragStartListener = this._renderer.listen('document', 'dragstart', function (e) {
            e.preventDefault();
        });
        this.checkNavStatus();
        this.dsInitialized.emit();
        this.adjustMarginToLastChild();
    };
    DragScrollComponent.prototype.ngAfterViewChecked = function () {
        if (this._children['_results'].length !== this.prevChildrenLength) {
            this.markElDimension();
            this.checkScrollbar();
            this.prevChildrenLength = this._children['_results'].length;
            this.checkNavStatus();
        }
    };
    DragScrollComponent.prototype.ngOnDestroy = function () {
        this._renderer.setAttribute(this._contentRef.nativeElement, 'drag-scroll', 'false');
        if (this._onMouseDownListener) {
            this._onMouseDownListener = this._onMouseDownListener();
        }
        if (this._onTouchStartListener) {
            this._onTouchStartListener = this._onTouchStartListener();
        }
        if (this._onScrollListener) {
            this._onScrollListener = this._onScrollListener();
        }
        if (this._onTouchEndListener) {
            this._onTouchEndListener = this._onTouchEndListener();
        }
        if (this._onDragStartListener) {
            this._onDragStartListener = this._onDragStartListener();
        }
    };
    DragScrollComponent.prototype.onMouseMoveHandler = function (event) {
        this.onMouseMove(event);
    };
    DragScrollComponent.prototype.onMouseMove = function (event) {
        if (this.isPressed && !this.disabled) {
            if (!this.xDisabled && !this.dragDisabled) {
                this._contentRef.nativeElement.scrollLeft =
                    this._contentRef.nativeElement.scrollLeft - event.clientX + this.downX;
                this.downX = event.clientX;
            }
            if (!this.yDisabled && !this.dragDisabled) {
                this._contentRef.nativeElement.scrollTop =
                    this._contentRef.nativeElement.scrollTop - event.clientY + this.downY;
                this.downY = event.clientY;
            }
        }
    };
    DragScrollComponent.prototype.onMouseDownHandler = function (event) {
        var dragScrollItem = this.locateDragScrollItem(((event.target)));
        if (dragScrollItem && dragScrollItem.dragDisabled) {
            return;
        }
        this._startGlobalListening();
        this.isPressed = true;
        this.downX = event.clientX;
        this.downY = event.clientY;
        clearTimeout(((this.scrollToTimer)));
    };
    DragScrollComponent.prototype.onScrollHandler = function () {
        var _this = this;
        this.checkNavStatus();
        if (!this.isPressed && !this.isAnimating && !this.snapDisabled) {
            this.isScrolling = true;
            clearTimeout(((this.scrollTimer)));
            this.scrollTimer = setTimeout(function () {
                _this.isScrolling = false;
                _this.locateCurrentIndex(true);
            }, 500);
        }
        else {
            this.locateCurrentIndex();
        }
    };
    DragScrollComponent.prototype.onMouseUpHandler = function (event) {
        if (this.isPressed) {
            this.isPressed = false;
            if (!this.snapDisabled) {
                this.locateCurrentIndex(true);
            }
            else {
                this.locateCurrentIndex();
            }
            this._stopGlobalListening();
        }
    };
    DragScrollComponent.prototype.moveLeft = function () {
        if ((this.currIndex !== 0 || this.snapDisabled)) {
            this.currIndex--;
            clearTimeout(((this.scrollToTimer)));
            this.scrollTo(this._contentRef.nativeElement, this.toChildrenLocation(), this.snapDuration);
        }
    };
    DragScrollComponent.prototype.moveRight = function () {
        var container = this.wrapper || this.parentNode;
        var containerWidth = container ? container.clientWidth : 0;
        if (!this.isScrollReachesRightEnd() && this.currIndex < this.maximumIndex(containerWidth, this._children)) {
            this.currIndex++;
            clearTimeout(((this.scrollToTimer)));
            this.scrollTo(this._contentRef.nativeElement, this.toChildrenLocation(), this.snapDuration);
        }
    };
    DragScrollComponent.prototype.moveTo = function (index) {
        var container = this.wrapper || this.parentNode;
        var containerWidth = container ? container.clientWidth : 0;
        if (index >= 0 &&
            index !== this.currIndex &&
            this.currIndex <= this.maximumIndex(containerWidth, this._children)) {
            this.currIndex = Math.min(index, this.maximumIndex(containerWidth, this._children));
            clearTimeout(((this.scrollToTimer)));
            this.scrollTo(this._contentRef.nativeElement, this.toChildrenLocation(), this.snapDuration);
        }
    };
    DragScrollComponent.prototype.checkNavStatus = function () {
        var _this = this;
        setTimeout(function () {
            var onlyOneItem = Boolean(_this._children['_results'].length <= 1);
            var containerIsLargerThanContent = Boolean(_this._contentRef.nativeElement.scrollWidth <=
                _this._contentRef.nativeElement.clientWidth);
            if (onlyOneItem || containerIsLargerThanContent) {
                _this.reachesLeftBound.emit(true);
                _this.reachesRightBound.emit(true);
            }
            else if (_this.isScrollReachesRightEnd()) {
                _this.reachesLeftBound.emit(false);
                _this.reachesRightBound.emit(true);
            }
            else if (_this._contentRef.nativeElement.scrollLeft === 0 &&
                _this._contentRef.nativeElement.scrollWidth > _this._contentRef.nativeElement.clientWidth) {
                _this.reachesLeftBound.emit(true);
                _this.reachesRightBound.emit(false);
            }
            else {
                _this.reachesLeftBound.emit(false);
                _this.reachesRightBound.emit(false);
            }
        }, 0);
    };
    DragScrollComponent.prototype._startGlobalListening = function () {
        if (!this._onMouseMoveListener) {
            this._onMouseMoveListener = this._renderer.listen('document', 'mousemove', this.onMouseMoveHandler.bind(this));
        }
        if (!this._onMouseUpListener) {
            this._onMouseUpListener = this._renderer.listen('document', 'mouseup', this.onMouseUpHandler.bind(this));
        }
    };
    DragScrollComponent.prototype._stopGlobalListening = function () {
        if (this._onMouseMoveListener) {
            this._onMouseMoveListener = this._onMouseMoveListener();
        }
        if (this._onMouseUpListener) {
            this._onMouseUpListener = this._onMouseUpListener();
        }
    };
    DragScrollComponent.prototype.disableScroll = function (axis) {
        this._renderer.setStyle(this._contentRef.nativeElement, "overflow-" + axis, 'hidden');
    };
    DragScrollComponent.prototype.enableScroll = function (axis) {
        this._renderer.setStyle(this._contentRef.nativeElement, "overflow-" + axis, 'auto');
    };
    DragScrollComponent.prototype.hideScrollbar = function () {
        if (this._contentRef.nativeElement.style.display !== 'none' && !this.wrapper) {
            this.parentNode = this._contentRef.nativeElement.parentNode;
            this.wrapper = this._renderer.createElement('div');
            this._renderer.setAttribute(this.wrapper, 'class', 'drag-scroll-wrapper');
            this._renderer.addClass(this.wrapper, 'drag-scroll-container');
            this.refreshWrapperDimensions();
            this._renderer.setStyle(this.wrapper, 'overflow', 'hidden');
            this._renderer.setStyle(this._contentRef.nativeElement, 'width', "calc(100% + " + this.scrollbarWidth + ")");
            this._renderer.setStyle(this._contentRef.nativeElement, 'height', "calc(100% + " + this.scrollbarWidth + ")");
            this._renderer.appendChild(this._elementRef.nativeElement, this.wrapper);
            this._renderer.appendChild(this.wrapper, this._contentRef.nativeElement);
            this.adjustMarginToLastChild();
        }
    };
    DragScrollComponent.prototype.showScrollbar = function () {
        if (this.wrapper) {
            this._renderer.setStyle(this._contentRef.nativeElement, 'width', '100%');
            this._renderer.setStyle(this._contentRef.nativeElement, 'height', this.wrapper.style.height);
            if (this.parentNode !== null) {
                this.parentNode.removeChild(this.wrapper);
                this.parentNode.appendChild(this._contentRef.nativeElement);
            }
            this.wrapper = null;
            this.adjustMarginToLastChild();
        }
    };
    DragScrollComponent.prototype.checkScrollbar = function () {
        if (this._contentRef.nativeElement.scrollWidth <= this._contentRef.nativeElement.clientWidth) {
            this._renderer.setStyle(this._contentRef.nativeElement, 'height', '100%');
        }
        else {
            this._renderer.setStyle(this._contentRef.nativeElement, 'height', "calc(100% + " + this.scrollbarWidth + ")");
        }
        if (this._contentRef.nativeElement.scrollHeight <= this._contentRef.nativeElement.clientHeight) {
            this._renderer.setStyle(this._contentRef.nativeElement, 'width', '100%');
        }
        else {
            this._renderer.setStyle(this._contentRef.nativeElement, 'width', "calc(100% + " + this.scrollbarWidth + ")");
        }
    };
    DragScrollComponent.prototype.setScrollBar = function () {
        if (this.scrollbarHidden) {
            this.hideScrollbar();
        }
        else {
            this.showScrollbar();
        }
    };
    DragScrollComponent.prototype.getScrollbarWidth = function () {
        var outer = this._renderer.createElement('div');
        this._renderer.setStyle(outer, 'visibility', 'hidden');
        this._renderer.setStyle(outer, 'width', '100px');
        this._renderer.setStyle(outer, 'msOverflowStyle', 'scrollbar');
        this._renderer.appendChild(this._document.body, outer);
        var widthNoScroll = outer.offsetWidth;
        this._renderer.setStyle(outer, 'overflow', 'scroll');
        var inner = this._renderer.createElement('div');
        this._renderer.setStyle(inner, 'width', '100%');
        this._renderer.appendChild(outer, inner);
        var widthWithScroll = inner.offsetWidth;
        this._renderer.removeChild(this._document.body, outer);
        return widthNoScroll - widthWithScroll || 20;
    };
    DragScrollComponent.prototype.refreshWrapperDimensions = function () {
        if (this.wrapper) {
            this._renderer.setStyle(this.wrapper, 'width', '100%');
            this._renderer.setStyle(this.wrapper, 'height', this._elementRef.nativeElement.style.height
                || this._elementRef.nativeElement.offsetHeight + 'px');
        }
    };
    DragScrollComponent.prototype.scrollTo = function (element, to, duration) {
        var self = this;
        self.isAnimating = true;
        var start = element.scrollLeft;
        var change = to - start - this.snapOffset;
        var increment = 20;
        var currentTime = 0;
        var easeInOutQuad = function (t, b, c, d) {
            t /= d / 2;
            if (t < 1) {
                return c / 2 * t * t + b;
            }
            t--;
            return -c / 2 * (t * (t - 2) - 1) + b;
        };
        var animateScroll = function () {
            currentTime += increment;
            element.scrollLeft = easeInOutQuad(currentTime, start, change, duration);
            if (currentTime < duration) {
                self.scrollToTimer = setTimeout(animateScroll, increment);
            }
            else {
                setTimeout(function () {
                    self.isAnimating = false;
                    self.snapAnimationFinished.emit(self.currIndex);
                }, increment);
            }
        };
        animateScroll();
    };
    DragScrollComponent.prototype.locateCurrentIndex = function (snap) {
        var _this = this;
        this.currentChildWidth(function (currentChildWidth, nextChildrenWidth, childrenWidth, idx, stop) {
            if ((_this._contentRef.nativeElement.scrollLeft >= childrenWidth &&
                _this._contentRef.nativeElement.scrollLeft <= nextChildrenWidth)) {
                if (nextChildrenWidth - _this._contentRef.nativeElement.scrollLeft > currentChildWidth / 2 && !_this.isScrollReachesRightEnd()) {
                    if (!_this.isAnimating) {
                        _this.currIndex = idx;
                    }
                    if (snap) {
                        _this.scrollTo(_this._contentRef.nativeElement, childrenWidth, _this.snapDuration);
                    }
                }
                else {
                    if (!_this.isAnimating) {
                        _this.currIndex = idx + 1;
                    }
                    if (snap) {
                        _this.scrollTo(_this._contentRef.nativeElement, childrenWidth + currentChildWidth, _this.snapDuration);
                    }
                }
                stop();
            }
            else if ((idx + 1) === (_this._children['_results'].length - 1)) {
                if (!_this.isAnimating) {
                    _this.currIndex = idx + 1;
                }
                stop();
            }
        });
    };
    DragScrollComponent.prototype.currentChildWidth = function (cb) {
        var childrenWidth = 0;
        var shouldBreak = false;
        var breakFunc = function () {
            shouldBreak = true;
        };
        for (var i = 0; i < this._children['_results'].length; i++) {
            if (i === this._children['_results'].length - 1) {
                break;
            }
            if (shouldBreak) {
                break;
            }
            var nextChildrenWidth = childrenWidth + this._children['_results'][i + 1]._elementRef.nativeElement.clientWidth;
            var currentClildWidth = this._children['_results'][i]._elementRef.nativeElement.clientWidth;
            cb(currentClildWidth, nextChildrenWidth, childrenWidth, i, breakFunc);
            childrenWidth += currentClildWidth;
        }
    };
    DragScrollComponent.prototype.toChildrenLocation = function () {
        var to = 0;
        for (var i = 0; i < this.currIndex; i++) {
            to += this._children['_results'][i]._elementRef.nativeElement.clientWidth;
        }
        return to;
    };
    DragScrollComponent.prototype.locateDragScrollItem = function (element) {
        var item = null;
        for (var i = 0; i < this._children['_results'].length; i++) {
            if (element === this._children['_results'][i]._elementRef.nativeElement) {
                item = this._children['_results'][i];
            }
        }
        return item;
    };
    DragScrollComponent.prototype.markElDimension = function () {
        if (this.wrapper) {
            this.elWidth = this.wrapper.style.width;
            this.elHeight = this.wrapper.style.height;
        }
        else {
            this.elWidth = this._elementRef.nativeElement.style.width || (this._elementRef.nativeElement.offsetWidth + 'px');
            this.elHeight = this._elementRef.nativeElement.style.height || (this._elementRef.nativeElement.offsetHeight + 'px');
        }
        var container = this.wrapper || this.parentNode;
        var containerWidth = container ? container.clientWidth : 0;
        this.indexBound = this.maximumIndex(containerWidth, this._children);
    };
    DragScrollComponent.prototype.maximumIndex = function (containerWidth, childrenElements) {
        var count = 0;
        var childrenWidth = 0;
        for (var i = 0; i <= childrenElements['_results'].length; i++) {
            var dragScrollItemDirective = childrenElements['_results'][childrenElements['_results'].length - 1 - i];
            if (!dragScrollItemDirective) {
                break;
            }
            else {
                childrenWidth += dragScrollItemDirective._elementRef.nativeElement.clientWidth;
                if (childrenWidth < containerWidth) {
                    count++;
                }
                else {
                    break;
                }
            }
        }
        return childrenElements.length - count;
    };
    DragScrollComponent.prototype.isScrollReachesRightEnd = function () {
        var scrollLeftPos = this._contentRef.nativeElement.scrollLeft + this._contentRef.nativeElement.offsetWidth;
        return scrollLeftPos >= this._contentRef.nativeElement.scrollWidth;
    };
    DragScrollComponent.prototype.onWheel = function (event) {
        if (this._xWheelEnabled) {
            event.preventDefault();
            if (this._snapDisabled) {
                this._contentRef.nativeElement.scrollBy(event.deltaY, 0);
            }
            else {
                if (event.deltaY < 0) {
                    this.moveLeft();
                }
                else if (event.deltaY > 0) {
                    this.moveRight();
                }
            }
        }
    };
    DragScrollComponent.prototype.onWindowResize = function () {
        this.refreshWrapperDimensions();
    };
    DragScrollComponent.prototype.adjustMarginToLastChild = function () {
        if (this._children && this.hideScrollbar) {
            var lastItem = this._children['_results'][this._children['_results'].length - 1]._elementRef.nativeElement;
            if (this.wrapper && this._children['_results'].length > 1) {
                this._renderer.setStyle(lastItem, 'margin-right', this.scrollbarWidth);
            }
            else {
                this._renderer.setStyle(lastItem, 'margin-right', 0);
            }
        }
    };
    DragScrollComponent.decorators = [
        { type: Component, args: [{
                    selector: 'drag-scroll',
                    template: "\n    <div class=\"drag-scroll-content\" #contentRef>\n      <ng-content></ng-content>\n    </div>\n  ",
                    styles: ["\n    :host {\n      overflow: hidden;\n      display: block;\n    }\n    .drag-scroll-content {\n      height: 100%;\n      overflow: auto;\n      white-space: nowrap;\n    }\n    "]
                },] },
    ];
    DragScrollComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    DragScrollComponent.propDecorators = {
        _contentRef: [{ type: ViewChild, args: ['contentRef',] }],
        _children: [{ type: ContentChildren, args: [DragScrollItemDirective,] }],
        dsInitialized: [{ type: Output }],
        indexChanged: [{ type: Output }],
        reachesLeftBound: [{ type: Output }],
        reachesRightBound: [{ type: Output }],
        snapAnimationFinished: [{ type: Output }],
        scrollbarHidden: [{ type: Input, args: ['scrollbar-hidden',] }],
        disabled: [{ type: Input, args: ['drag-scroll-disabled',] }],
        xDisabled: [{ type: Input, args: ['drag-scroll-x-disabled',] }],
        yDisabled: [{ type: Input, args: ['drag-scroll-y-disabled',] }],
        xWheelEnabled: [{ type: Input, args: ['scroll-x-wheel-enabled',] }],
        dragDisabled: [{ type: Input, args: ['drag-disabled',] }],
        snapDisabled: [{ type: Input, args: ['snap-disabled',] }],
        snapOffset: [{ type: Input, args: ['snap-offset',] }],
        snapDuration: [{ type: Input, args: ['snap-duration',] }],
        onWheel: [{ type: HostListener, args: ['wheel', ['$event'],] }],
        onWindowResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return DragScrollComponent;
}());
export { DragScrollComponent };
if (false) {
    DragScrollComponent.prototype._index;
    DragScrollComponent.prototype._scrollbarHidden;
    DragScrollComponent.prototype._disabled;
    DragScrollComponent.prototype._xDisabled;
    DragScrollComponent.prototype._xWheelEnabled;
    DragScrollComponent.prototype._yDisabled;
    DragScrollComponent.prototype._dragDisabled;
    DragScrollComponent.prototype._snapDisabled;
    DragScrollComponent.prototype._snapOffset;
    DragScrollComponent.prototype._snapDuration;
    DragScrollComponent.prototype._onMouseMoveListener;
    DragScrollComponent.prototype._onMouseUpListener;
    DragScrollComponent.prototype._onMouseDownListener;
    DragScrollComponent.prototype._onTouchStartListener;
    DragScrollComponent.prototype._onScrollListener;
    DragScrollComponent.prototype._onTouchEndListener;
    DragScrollComponent.prototype._onDragStartListener;
    DragScrollComponent.prototype.isPressed;
    DragScrollComponent.prototype.isScrolling;
    DragScrollComponent.prototype.scrollTimer;
    DragScrollComponent.prototype.scrollToTimer;
    DragScrollComponent.prototype.downX;
    DragScrollComponent.prototype.downY;
    DragScrollComponent.prototype.displayType;
    DragScrollComponent.prototype.elWidth;
    DragScrollComponent.prototype.elHeight;
    DragScrollComponent.prototype.parentNode;
    DragScrollComponent.prototype._contentRef;
    DragScrollComponent.prototype._children;
    DragScrollComponent.prototype.wrapper;
    DragScrollComponent.prototype.scrollbarWidth;
    DragScrollComponent.prototype.isAnimating;
    DragScrollComponent.prototype.prevChildrenLength;
    DragScrollComponent.prototype.indexBound;
    DragScrollComponent.prototype.dsInitialized;
    DragScrollComponent.prototype.indexChanged;
    DragScrollComponent.prototype.reachesLeftBound;
    DragScrollComponent.prototype.reachesRightBound;
    DragScrollComponent.prototype.snapAnimationFinished;
    DragScrollComponent.prototype._elementRef;
    DragScrollComponent.prototype._renderer;
    DragScrollComponent.prototype._document;
}
//# sourceMappingURL=ngx-drag-scroll.js.map